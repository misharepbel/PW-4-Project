version: '3.4'

services:
  kafka:
    image: bitnami/kafka:3.6.1
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_KRAFT_CLUSTER_ID: fdAWMfT7TNSt891-ezfaeg
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_KRAFT_PREPARE: "yes"
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: BROKER://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: BROKER://kafka:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT
    volumes:
      - kafka_data:/bitnami/kafka
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
        SA_PASSWORD: MyPassw0rd!
        ACCEPT_EULA: "Y"
    ports:
        - "1433:1433"
  orderservice:
    build:
      context: ./OrderService
      dockerfile: OrderService/Dockerfile
    environment:
      ConnectionStrings__Default: "${ORDERS_CONNECTIONSTRING}"
      Kafka__BootstrapServers: "${KAFKA_BOOTSTRAP_SERVERS}"
      Kafka__CartCheckedOutTopic: "${KAFKA_CART_CHECKED_OUT_TOPIC}"
      Kafka__OrderCreatedTopic: "${KAFKA_ORDER_CREATED_TOPIC}"
      JWT_PUBLIC_KEY: "${JWT_PUBLIC_KEY}"
    expose:
      - "8080"
    depends_on:
      - sqlserver

  userservice:
      build:
        context: ./UserService
        dockerfile: UserService.API/Dockerfile
      environment:
        ConnectionStrings__Default: "${USERS_CONNECTIONSTRING}"
        JWT_PRIVATE_KEY: "${JWT_PRIVATE_KEY}"
        JWT_PUBLIC_KEY: "${JWT_PUBLIC_KEY}"
        Kafka__BootstrapServers: "${KAFKA_BOOTSTRAP_SERVERS}"
        Kafka__UserRegisteredTopic: "${KAFKA_USER_REGISTERED_TOPIC}"
        Kafka__PasswordResetTopic: "${KAFKA_PASSWORD_RESET_TOPIC}"
      expose:
        - "8080"
      depends_on:
        - sqlserver

  catalogservice:
    build:
      context: ./CatalogService
      dockerfile: CatalogService.API/Dockerfile
    environment:
      ConnectionStrings__Default: "${CATALOG_CONNECTIONSTRING}"
      Kafka__BootstrapServers: "${KAFKA_BOOTSTRAP_SERVERS}"
      Kafka__ProductCacheTopic: "${KAFKA_PRODUCT_CACHE_TOPIC}"
      JWT_PUBLIC_KEY: "${JWT_PUBLIC_KEY}"
    expose:
      - "8080"
    depends_on:
      - sqlserver
      - kafka
    volumes: []

  cartservice:
    build:
      context: ./CartService
      dockerfile: CartService.API/Dockerfile
    environment:
      ConnectionStrings__Redis: "${REDIS_CONNECTIONSTRING}"
      Kafka__BootstrapServers: "${KAFKA_BOOTSTRAP_SERVERS}"
      Kafka__ProductCacheTopic: "${KAFKA_PRODUCT_CACHE_TOPIC}"
      JWT_PUBLIC_KEY: "${JWT_PUBLIC_KEY}"
    expose:
      - "8080"
    depends_on:
      - redis
      - kafka
      - catalogservice
    volumes: []
  notificationservice:
    build:
      context: .
      dockerfile: NotificationService/Dockerfile
    environment:
      Kafka__BootstrapServers: "${KAFKA_BOOTSTRAP_SERVERS}"
      Kafka__UserRegisteredTopic: "${KAFKA_USER_REGISTERED_TOPIC}"
      Kafka__PasswordResetTopic: "${KAFKA_PASSWORD_RESET_TOPIC}"
      Kafka__PaymentReceiptTopic: "${KAFKA_PAYMENT_RECEIPT_TOPIC}"
      Smtp__Host: "${SMTP_HOST}"
      Smtp__Port: "${SMTP_PORT}"
      Smtp__User: "${SMTP_USER}"
      Smtp__Pass: "${SMTP_PASS}"
      Smtp__From: "${SMTP_FROM}"
    expose:
      - "8080"
    depends_on:
      - kafka
  paymentservice:
    build:
      context: .
      dockerfile: PaymentService/Dockerfile
    environment:
      Kafka__BootstrapServers: "${KAFKA_BOOTSTRAP_SERVERS}"
      Kafka__OrderPaidTopic: "${KAFKA_ORDER_PAID_TOPIC}"
      Kafka__PaymentReceiptTopic: "${KAFKA_PAYMENT_RECEIPT_TOPIC}"
      Kafka__OrderCreatedTopic: "${KAFKA_ORDER_CREATED_TOPIC}"
      JWT_PUBLIC_KEY: "${JWT_PUBLIC_KEY}"
    expose:
      - "8080"
    depends_on:
      - kafka
      - orderservice
  apigateway:
    build:
      context: .
      dockerfile: ApiGateway/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      userservice:
         condition: service_started
      orderservice:
         condition: service_started
      catalogservice:
         condition: service_started
      cartservice:
         condition: service_started
volumes:
   kafka_data:
      

 
  
  
